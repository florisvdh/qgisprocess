# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }}, ${{ matrix.config.qgis }})
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, qgis: 'none', r: 'release'}
          - {os: windows-latest, qgis: 'windows-chocolatey', r: 'release'}
          - {os: ubuntu-20.04, qgis: 'ubuntu-nightly', r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, qgis: 'ubuntu', r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
      - uses: r-lib/actions/setup-pandoc@master

      - name: Install QGIS (Ubuntu Nightly)
        if: matrix.config.qgis == 'ubuntu-nightly'
        run: |
          wget -qO - https://qgis.org/downloads/qgis-2020.gpg.key | sudo gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/qgis-archive.gpg --import || true
          sudo chmod a+r /etc/apt/trusted.gpg.d/qgis-archive.gpg
          sudo add-apt-repository "deb https://qgis.org/ubuntu-nightly `lsb_release -c -s` main"
          sudo apt-get update
          sudo apt-get install -y qgis qgis-plugin-grass saga

      - name: Install QGIS (Ubuntu)
        if: matrix.config.qgis == 'ubuntu'
        run: |
          wget -qO - https://qgis.org/downloads/qgis-2020.gpg.key | sudo gpg --no-default-keyring --keyring gnupg-ring:/etc/apt/trusted.gpg.d/qgis-archive.gpg --import || true
          sudo chmod a+r /etc/apt/trusted.gpg.d/qgis-archive.gpg
          sudo add-apt-repository "deb https://qgis.org/ubuntu `lsb_release -c -s` main"
          sudo apt-get update
          sudo apt-get install -y qgis qgis-plugin-grass saga

# installs homebrew QGIS
# currently 3.14 with no 'qgis_process'
# leaving this out until 3.16
      - name: Install QGIS (MacOS homebrew)
        if: matrix.config.qgis == 'macos-brew'
        run: |
          brew cask install qgis

# installs last nightly build of QGIS
# works locally, hangs on GHA after download
# leaving this out until can figure out how to run reliably
      - name: Install QGIS (MacOS nightly)
        if: matrix.config.qgis == 'macos-nightly'
        run: |
          curl https://qgis.org/downloads/macos/qgis-macos-nightly.dmg --output qgis-macos-nightly.dmg
          yes | hdiutil attach -nobrowse -noverify -mountpoint qgis qgis-macos-nightly.dmg > /dev/null
          sudo cp -R qgis/QGIS.app /Applications

      - name: Install QGIS (Windows chocolatey)
        if: matrix.config.qgis == 'windows-chocolatey'
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install qgis

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Show platform-info output
        if: always()
        run: find check -name 'platform-info.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-${{ matrix.config.qgis }}-results
          path: check
